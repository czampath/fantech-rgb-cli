import usb.core
from constants.hex_constants import ControlDataPoint, SpecialDataPoint
from constants.hid_constants import HID_Data

# Vendor and Product IDs of your Fantech RGB gaming keyboard
VENDOR_ID = 0x0C45  # Replace with your keyboard's vendor ID
PRODUCT_ID = 0x8006  # Replace with your keyboard's product ID

# Find the device
device = usb.core.find(idVendor=VENDOR_ID, idProduct=PRODUCT_ID)

# Check if the device is found
if device is None:
    print("Device not found.")
    exit()

# Set configuration
device.set_configuration()

off =['04ab0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 'f269c4e1abdad6b84302d3a50b39bf713c26b39be9e3789d315c5571b9f824545a7cabca162c2ae2513331bb3d44b4479782614f919d31b70f3e3e0415a6d41b', 
 '04020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '04130000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '0000000000000000000000000000aa55000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '04020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 
 '04f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000']

# Iterate through the setup data and send the requests
for data in off:
    try:
        hexData = bytes.fromhex(data)
        device.ctrl_transfer(HID_Data.BmRequestType.TO_DEVICE, HID_Data.BRequest.SET_REPORT, HID_Data.wValue, HID_Data.wIndex, hexData)
        
        # Send GET_REPORT after each data point
        if data in [SpecialDataPoint.static, ControlDataPoint.INIT_COMM, ControlDataPoint.END_TRANSFER, ControlDataPoint.BEGIN_DATA_TRANSFER]:
            device.ctrl_transfer(HID_Data.BmRequestType.TO_HOST, HID_Data.BRequest.GET_REPORT, HID_Data.wValue, HID_Data.wIndex, HID_Data.wLength)

    except usb.core.USBError as e:
        print("Error sending SET_REPORT request:", e)

print("Request sent successfully.")