import usb.core
import usb.util


# Vendor and Product IDs of your Fantech RGB gaming keyboard
VENDOR_ID = 0x0C45  # Replace with your keyboard's vendor ID VID_0C45&PID_8006&MI_01&Col03
PRODUCT_ID = 0x8006  # Replace with your keyboard's product ID

# Find the device
device = usb.core.find(idVendor=VENDOR_ID, idProduct=PRODUCT_ID)

# Specify libusb-win32 backend

#device = usb.core.find(idVendor=VENDOR_ID, idProduct=PRODUCT_ID, backend=backend)

# Check if the device is found
if device is None:
    print("Device not found.")
    exit()

# Detach kernel driver if active
if device.is_kernel_driver_active(0):
    try:
        device.detach_kernel_driver(0)
        print("Kernel driver detached.")
    except usb.core.USBError as e:
        print("Error detaching kernel driver:", e)

# Set configuration
device.set_configuration()

# Define your SET_REPORT data
# This data should match the format and content observed in the Wireshark capture
# report_data = b'\x04\xab\x00...'  # Replace with your SET_REPORT data

report_data = b''.join([
    bytes.fromhex('04ab0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
    bytes.fromhex('e17fc2528765c76144b5865511916c7a5eb905bcb4a3bf5f99cff1f0b4551b7b31c070fe671e911eb8589c19b9c065fc93e90316aabb8fac7cc628eecbd73a2a'),
    bytes.fromhex('04020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
    bytes.fromhex('04130000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
    bytes.fromhex('0100ffff0000000000100c000000aa550200ffff0000000001100c000000aa550300ffff0000000001100c000000aa55040000ff0000000001100c000000aa55'),
    bytes.fromhex('050000ff0000000001100c000000aa55060000ff0000000001100c000000aa550700ffff0000000000100c000000aa55080000ff0000000001100c000000aa55'),
    bytes.fromhex('090000ff0000000001100c000000aa550a0000ff0000000001100c030000aa550b0000ff0000000001100c000000aa550c0000ff0000000001100c000000aa55'),
    bytes.fromhex('0d0000ff0000000001100c000000aa550e0000ff0000000001100c000000aa550f0000ff0000000001100c000000aa55100000ff0000000001100c000000aa55'),
    bytes.fromhex('110000ff0000000001100c000000aa55120000ff0000000001100c000000aa55130000ff0000000001100c000000aa558000000000000000001000000000aa55'),
    bytes.fromhex('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
    bytes.fromhex('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
    bytes.fromhex('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
    bytes.fromhex('80000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000'),
    bytes.fromhex('80000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000'),
    bytes.fromhex('80000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000'),
    bytes.fromhex('80000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000'),
    bytes.fromhex('80000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000'),
    bytes.fromhex('80000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000'),
    bytes.fromhex('80000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000'),
    bytes.fromhex('80000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000'),
    bytes.fromhex('80000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000'),
    bytes.fromhex('040000ff0000000001100c000000aa55000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
    bytes.fromhex('04020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
    bytes.fromhex('04f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
    bytes.fromhex('04180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')
])

# Send SET_REPORT request
try:
    # Use control transfer to send the request
    device.ctrl_transfer(0x21, 0x09, wValue=0x0300, wIndex=0, data_or_wLength=report_data)
    print("SET_REPORT request sent successfully.")
except usb.core.USBError as e:
    print("Error sending SET_REPORT request:", e)
